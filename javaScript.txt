145. Quick Numbers Quiz
- NaN: Not a number
  0/0 = NaN
  1 + NaN = NaN
- Always put the semicolom ";" at the end of the statement. 


147. Updating variable 
- If you want to clear the terminal: clear()

152. Introducing strings
- There are 2 cases for quote usage:
  'You had me at "hello"'
  "You had me at 'hello'"
  [If at the begin and end are double quotes, there must be normal quotes inside; reverse]

153. Indices & length
- a string is a character array so it is same as C/C++ language.
  let name = "Hoang";
  name[2] = "a";
- use "length" syntax to count the length of string. 
  let animal = "Octupus";
  animal.length = 7;
  "dog".length = 3;
  "lol" + "lol" = "lollol";
  
  let firstName = "River";
  let lastName = "Phoenix";
  firstName + lastName = "RiverPhoenix";
  [Defautly, if you want to change "R" of "River" to lovercase, "r", you have to modify the whole word to "river"]


  result = 1 + "hi";
  result = "1hi";

154. String methods 
- Uppercase: [variable].toUpperCase()
- Lowercase: [variable].toLowerCase()
- Eliminate redundant space between words in the sentence [used for string only]: [variable].trim() 
- We can use many methods at the same time for a variable: [variable].trim().toUpperCase();

155. String methods with arguments
- Find characters or words in a string: [variable].indexOf('[finding]')
- Print out characters at the expected position: [variable].slice(begin position, end position)
  [when the value of begin or end position is negative, it means the position of reverse string.
- Print out a string many time: [variable].repeat()]

156. String templates literals
- 2 ways to print out a whole sentence with number variable
  "you bought " + qty + " " + product + ". Total is: " + price * qty  
 ="You bought ${qty} ${product.toUpperCase()}. Total is: $${price * qty}" 

157. Undefined & NULL
- A variable which has not been assigned yet is called a NULL variable.
- A value of a NULL variable is undefined.

158. Math objects & random number 
- There are many constance that Math in JV provides: Math.[objects]
  Math.PI 
  Math.round(4.9) = Math.ceil(4.5) //5 
  Math.abs(-456) //456
  Math.pow(2, 5) //32
  Math.floor(3.9999) //3 
- random in Jv
  Math.random()  
  [use * [a condition] to limit the upper of the random]
  Math.random() * 6 [random from 1 to 6]

162. Equality: double & triple euqal
- double equality: string and number variable will be equal regardless of it's type of variable
  1 != '1' // false
  1 == '1' // true
- triple equality: string and number variable is different because string variable which is compared to number 
variable is converted from dec to ASCII. 
  1 !== '1' // true
  1 === '1' // false

163. Console, alert, & prompt
- Print commannd: console.log( ... )
- Warn command: console.warn( ... )
- Error command: console.error( ... )

- Print an alert command: alert( ... )

- Print input box for user to enter value as string type: prompt
- Convert from string to number type: parseInt(" ... ")

165. If statement
- In the condition, if comparision between 2 variables is equality, it must be triple equality.
  if(a === b) {
  	console.log("Even");
  }

176. Array random access
- Initialize an empty array: let arrayName = [];
- In Jv, there is mixed array, including number and string in the same array. 

177. Push & pop
- Add to end: [array].push([value]) 
- remove from end [passed value is no needed]: [array].pop()  

178. Shift & unshift
- Remove from start: [array].shift()
- Add to start: [array].unshift([value) 

179. Concat, indexOf, reverse & includes
- Merge arrays [The whole second array will be added into the end of the first array]: [firstArray].concat([secondArray])
- Look for a value: [array].includes([value])
- Reverses an array: [array].reverse()

180. slice & splice 
- Copies a portion on an array [if pass only one value, it will display from that position to the end]: 
  [array].slice([start position], [end position])
- Removes/ replace [Use splice to remove and replace st else, in case that you do not remove anything (deleteCount = 0), it will append the 
value into the position: [array].splice([start position], [deleteCount], [value])
- Create a string from an array: join
- Sorts an array: [array].sort()
  [it will change all the element into string and compare their sequences of UTF-16 code]

181. Reference types& equality testing 
- In arrays, you obviously cannot compare them because it locates in different memmory. 
- But an variable can act like an pointer to an array. For example: 
  let nums = [1, 2, 3]
  let numCopy = nums
  nums.push(4) // nums = [1, 2, 3, 4]
  numCopy = [1, 2, 3, 4]
  
182. array + const 
- If use const for an array, assign new values to any elements of the array is forbidden. However, you can use array methods such 
  as push, pop, shift, unshift, and splice to edit the array's elements.

186. Creating Object Literals 
- const [name] = { [values]}
  [those value can be number, string and array]
  const kitchenSink = {
  	favNum: 92319023, 
  	isFunny: true, 
  	colors: ['red', 'orange']
  }

187. Accessing Data out of Object
- 2 ways: 
  kitchenSink["favNum"]
  kitchenSink.favNum
  [If we use bracket to call out the object, it must be a string] 
  [In another case that we use bracket and the inside value is a variable, it still works if the variable contains the object 	
  inside the literals]
- Apply 2 given methods to initialize the variables out side the literal.

188. Nesting arrays & objects 
- You can create an array that contains many object literals
- Create another object literals in an object literal.

199. The lovely for ... of loop
- for (let [variable] of [array]) 
  for(let subreddit of subreddits) {
  	console.log(subreddit);
  }

200. iterating over objects 
- In object literals: There will be key and value 
- To take all the keys in an object literal: Object.keys([Object Literal])
- To take all the values in an object literal: Object.values([Object Literal])
- To make each object to be an array: Object.entries([object literal]) 
